
# %(mroot)        - absolute path to root m.cfg
# %(mpath)        - relative path from root to current m.cfg
# %(mprojectpath) - relative path from root to current project dir
# %builddir sets the project/makefile are output directory.
# To get the path a variable was defined at use %(var:MPATH)

# Get current directory as build root

%lemon_buildroot = "%(lemon_buildroot:MPATH)"
%lemon_source    = "%(lemon_buildroot)"
%lemon_libdir    = "%(lemon_source)\lib\#(platform)\#(version)"
%lemon_external  = "%(lemon_buildroot)\external"

Platform("Win32")
{
  # Different VC versions output to different locations to keep
  # linker option compatibility
  %lemon_libdir    = "%(lemon_source)\lib\#(platform)\#(version)_#(vcversion)"
}

# If another project includes this file, it should override
# the following variables for its own lib, dll and exe output paths.

%libdir    = "%(lemon_libdir)"
%dlldir    = "%(lemon_source)\bin\#(platform)"
%sysexedir = "%(lemon_source)\bin\#(platform)"
%exedir    = "%(mpath)"

Tool(Compiler)
{
  AdditionalIncludeDirectories += "%(lemon_source)\include"
}

Configuration()
{
  %postfix    = ""
  %libpostfix = "%(postfix)"
  %exepostfix = ""

  # Get full path of current source directory

  %thisdir = "%(mroot)\%(mpath)"

  # build project/make files
  # if %builddir is set, project and makefiles will be placed there.

  %builddir     = "%(mroot)\build\toolchain\%(mprojectpath)"

  # Also set a temp build path (this is used as the intermediate directory
  # base during configuration below

  %buildtempdir = "%(mroot)\build\toolchain\intermediate\%(mprojectpath)"
}

# ===== Lemon audio build settings ======

Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IFF"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IMPORT_IOSTREAM"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IMPORT_VB"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IMPORT_ADS"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IMPORT_WAV"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IMPORT_VAG"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_SUPPORT_IMPORT_WAVPACK"

Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_IRX"
Tool(Compiler),PreprocessorDefinitions += "L_AUDIO_PRX"

# ===== Win32 Common ======

Platform("Win32")
{
  Tool(Compiler),AdditionalIncludeDirectories += "%(lemon_external)\dxsdk\feb06\include"
  Tool(Linker,Library),AdditionalLibraryDirectories += "%(lemon_external)\dxsdk\feb06\lib\x86"

  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_WIN32"
  Tool(Compiler),PreprocessorDefinitions += "_WIN32"

  # Set up the dll/exe postfix

  %postfix += "_W32"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== XBox Common ======

Platform("Xbox")
{
  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_XBOX"
  Tool(Compiler),PreprocessorDefinitions += "_XBOX"

  # Set up the dll/exe postfix

  %postfix += "_XB"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== XBox 360 Common ======

Platform("Xbox360")
{
  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_XBOX360"
  Tool(Compiler),PreprocessorDefinitions += "_XBOX360"
  Tool(Compiler),PreprocessorDefinitions += "_XBOX"

  # Set up the dll/exe postfix

  %postfix += "_XB360"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== GNU Common ======

Platform("GNU")
{
  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_PSP"

  # Set up the dll/exe postfix

  %postfix += "_GNU"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== PS2 Common ======

Platform("PS2")
{
  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_PS2"

  # Set up the dll/exe postfix

  %postfix += "_PS2"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== PS2 IOP ======

Platform("PS2IOP")
{
  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_PS2IOP"

  # Set up the dll/exe postfix

  %postfix += "_PS2IOP"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== PSP Common ======

Platform("PSP")
{
  ##x##Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_PSP"
  Tool(Compiler),PreprocessorDefinitions += "_PSP"

  # Set up the dll/exe postfix

  %postfix += "_PSP"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}

# ===== NDS Common ======

Platform("NDS")
{
  Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_NDS"

  # Set up the dll/exe postfix

  %postfix += "_NDS"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }

  Configuration("FinalRom")
  {
    %postfix += "_finalrom"
  }
}

# ===== Wii Common ======

Platform("Wii")
{
  Tool(Compiler),PreprocessorDefinitions += "L_PLATFORM_WII"

  # Set up the dll/exe postfix

  %postfix += "_WII"

  Configuration("Debug")
  {
    %postfix += "_D"
  }

  Configuration("DevRelease")
  {
    %postfix += "_DR"
  }
}


# ===== Common ======

Configuration()
{
  # Compiler

  Tool(Compiler)
  {
    UsePrecompiledHeader           = None
    WarningLevel                   = 2
    DefaultCharIsUnsigned          = TRUE
    Detect64BitPortabilityProblems = FALSE
  }

  # Linker

  Tool(Linker),AdditionalLibraryDirectories += "%(lemon_libdir)"
}

# ===== Debug ======

Configuration("Debug")
{
  OutputDirectory="%(buildtempdir)\Debug_#(platform)"
  IntermediateDirectory="%(buildtempdir)\Debug_#(platform)"

  Platform("Win32")
  {
    OutputDirectory="%(buildtempdir)\Debug_#(platform)_#(vcversion)"
    IntermediateDirectory="%(buildtempdir)\Debug_#(platform)_#(vcversion)"
  }

  LTCG = "FALSE"

  Tool(Compiler)
  {
    PreprocessorDefinitions += "_DEBUG"
    PreprocessorDefinitions += "L_DEBUG"
    PreprocessorDefinitions += "L_RELEASE_NAME=Debug"

#    AdditionalOptions            = "/GZ"
    RuntimeLibrary               = "MultiThreadedDebug"
    Optimization                 = "Disabled"
    InlineFunctionExpansion      = "OnlyInline"
    MinimalRebuild               = "TRUE"
    BasicRuntimeChecks           = "All"
    DebugInformationFormat       = "Enabled"
    GlobalOptimizations          = "FALSE"
    BufferSecurityCheck          = "TRUE"
  }
}

# ===== Release ======

Configuration("Release")
{
  OutputDirectory="%(buildtempdir)\Release_#(platform)"
  IntermediateDirectory="%(buildtempdir)\Release_#(platform)"

  Platform("Win32")
  {
    OutputDirectory="%(buildtempdir)\Release_#(platform)_#(vcversion)"
    IntermediateDirectory="%(buildtempdir)\Release_#(platform)_#(vcversion)"
  }

  LTCG = "FALSE"

  Tool(Compiler)
  {
    PreprocessorDefinitions += "NDEBUG"
    PreprocessorDefinitions += "L_RELEASE_NAME=Release"

    MinimalRebuild               = "TRUE"
    RuntimeLibrary               = "MultiThreaded"
    Optimization                 = "Full"
    InlineFunctionExpansion      = "AnySuitable"
    FavorSizeOrSpeed             = "Speed"
    OmitFramePointers            = "TRUE"
    StringPooling                = "TRUE"
    EnableFunctionLevelLinking   = "TRUE"
    DebugInformationFormat       = "Enabled"
    GlobalOptimizations          = "TRUE"
#    EnableEnhancedInstructionSet = "SIMD"
    OptimizeForProcessor         = "PentiumFourAndAbove"
    BufferSecurityCheck          = "FALSE"
  }

  Tool(Linker),OptimizeReferences           = "Yes"
  Tool(Linker),EnableCOMDATFolding          = "No"
}

# ===== DevRelease ======

Configuration("DevRelease")
{
  OutputDirectory="%(buildtempdir)\DevRelease_#(platform)"
  IntermediateDirectory="%(buildtempdir)\DevRelease_#(platform)"

  Platform("Win32")
  {
    OutputDirectory="%(buildtempdir)\DevRelease_#(platform)_#(vcversion)"
    IntermediateDirectory="%(buildtempdir)\DevRelease_#(platform)_#(vcversion)"
  }

  LTCG = "FALSE"

  Tool(Compiler)
  {
    # Still linking with non-debug runtime and other libs
    PreprocessorDefinitions += "NDEBUG"
    PreprocessorDefinitions += "L_DEBUG"
    PreprocessorDefinitions += "L_RELEASE_NAME=DevRelease"

    MinimalRebuild               = "TRUE"
    RuntimeLibrary               = "MultiThreaded"
    Optimization                 = "Full"
    InlineFunctionExpansion      = "AnySuitable"
    FavorSizeOrSpeed             = "Speed"
    OmitFramePointers            = "TRUE"
    StringPooling                = "TRUE"
    EnableFunctionLevelLinking   = "TRUE"
    DebugInformationFormat       = "Enabled"
    GlobalOptimizations          = "TRUE"
#    EnableEnhancedInstructionSet = "SIMD"
    OptimizeForProcessor         = "PentiumFourAndAbove"
    BufferSecurityCheck          = "FALSE"
  }

  Tool(Linker),OptimizeReferences           = "Yes"
  Tool(Linker),EnableCOMDATFolding          = "No"
}


# ===== Win32 Specific ======

Platform("Win32")
{
  Configuration("Debug","Release","DevRelease")
  {
    Tool(Linker),GenerateDebugInformation = "TRUE"
  }
}

Platform("NDS")
{
  NitroCodeGen = "ARM"

  Configuration("Debug")
  {
    NitroBuild = "debug"
  }

  Configuration("Release","DevRelease")
  {
    NitroBuild = "release"
  }

  Configuration("FinalRom")
  {
    OutputDirectory="%(buildtempdir)\FinalRom_#(platform)"
    IntermediateDirectory="%(buildtempdir)\FinalRom_#(platform)"
    LTCG = "FALSE"

    NitroBuild    = FINALROM

    Tool(Compiler)
    {
      PreprocessorDefinitions += "NDEBUG"
      PreprocessorDefinitions += "L_FINAL"
      PreprocessorDefinitions += "L_RELEASE_NAME=FinalRom"

      MinimalRebuild               = "TRUE"
      RuntimeLibrary               = "MultiThreaded"
      Optimization                 = "Full"
      InlineFunctionExpansion      = "AnySuitable"
      FavorSizeOrSpeed             = "Speed"
      OmitFramePointers            = "TRUE"
      StringPooling                = "TRUE"
      EnableFunctionLevelLinking   = "TRUE"
      DebugInformationFormat       = "Enabled"
      GlobalOptimizations          = "TRUE"
      #EnableEnhancedInstructionSet = "SIMD"
      OptimizeForProcessor         = "PentiumFourAndAbove"
      BufferSecurityCheck          = "FALSE"
    }

    Tool(Linker),OptimizeReferences           = "Yes"
    Tool(Linker),EnableCOMDATFolding          = "No"
  }
}

Platform("WII")
{
  Configuration("Debug")
  {
    RvlBuild = "debug"
  }

  Configuration("Release","DevRelease")
  {
    RvlBuild = "release"
  }
}



# ===== XBox Specific ======

Platform("Xbox")
{
  # --- Don't optimize references on Xbox ---

  Tool(Linker),OptimizeReferences = "No"

  # ----- XBox specific options -----

  Tool(Compiler),OptimizeForProcessor          = "PentiumProAndAbove"
#  Tool(Compiler),EnableEnhancedInstructionSet  = "SIMD"
  Tool(Linker),OptimizeForWindows98            = "Yes"
  Tool(XBoxImage),StackSize                    = "65536"
  Tool(XBoxDeployment),ExcludedFromBuild       = "TRUE"

  # ----- Configuration specific options -----

  Configuration("Debug")
  {
    Tool(Linker),AdditionalDependencies="xapilibd.lib d3d8d.lib d3dx8d.lib xgraphicsd.lib dsoundd.lib dmusicd.lib xactengd.lib xsndtrkd.lib xvoiced.lib xonlined.lib xboxkrnl.lib xbdm.lib"
    Tool(XBoxImage),IncludeDebugInfo="TRUE"
    Tool(XBoxImage),NoLibWarn="TRUE"
  }

  Configuration("Release","DevRelease")
  {
    Tool(Linker),SetChecksum = "TRUE"

    # FastCap profile:

    Tool(Linker),AdditionalDependencies="xapilib.lib d3d8i.lib d3dx8.lib xgraphics.lib dsound.lib dmusici.lib xactengd.lib xsndtrk.lib xvoice.lib xonline.lib xboxkrnl.lib xbdm.lib xperf.lib"

    Tool(Compiler),PreprocessorDefinitions += "FASTCAP"
    Tool(Compiler),FastCAP="TRUE"

    Tool(XBoxImage),IncludeDebugInfo="TRUE"
    Tool(XBoxImage),NoLibWarn="TRUE"
    LTCG = "FALSE"

    # Note, now using xonline.lib not xonlines.lib, so we can communicate with untrusted hosts.
    #Tool(Linker),AdditionalDependencies="xapilib.lib d3d8.lib d3dx8.lib xgraphics.lib dsound.lib dmusic.lib xacteng.lib xsndtrk.lib xvoice.lib xonline.lib xboxkrnl.lib"
    #Tool(Linker),SetChecksum="TRUE"
    #
    # Note: should be using:
    #Tool(Linker),AdditionalDependencies = "xapilib.lib d3d8ltcg.lib d3dx8.lib xgraphicsltcg.lib dsound.lib dmusicltcg.lib xactengltcg.lib xsndtrk.lib xvoice.lib xonline.lib xboxkrnl.lib"

#    LTCG = "TRUE"
#    Tool(Compiler),PreprocessorDefinitions += "LTCG"
#    Tool(Linker),AdditionalDependencies = "xapilib.lib d3d8ltcg.lib d3dx8.lib xgraphicsltcg.lib dsound.lib dmusicltcg.lib xactengltcg.lib xsndtrk.lib xvoice.lib xonline.lib xboxkrnl.lib"
  }

  ## TODO:
  ##
  #Configuration("Profile") // inherit from 'release'
  #{
  #  AdditionalDependencies="xapilib.lib d3d8i.lib d3dx8.lib xgraphics.lib dsound.lib dmusici.lib xactengi.lib xsndtrk.lib xvoice.lib xonlines.lib xboxkrnl.lib xbdm.lib xperf.lib"
  #  IncludeDebugInfo="TRUE"
  #  NoLibWarn="TRUE"
  #}

  #Configuration("Profile_FastCap") // inherit from 'release'
  #{
  #  FastCAP="TRUE"
  #  PreprocessorDefinitions+="FASTCAP"
  #  IncludeDebugInfo="TRUE"
  #  NoLibWarn="TRUE"
  #}

  #Configuration("Release_LTCG")
  #{
  #  WholeProgramOptimization="TRUE"
  #  PreprocessorDefinitions += "LTCG"
  #  AdditionalDependencies="xapilib.lib d3d8ltcg.lib d3dx8.lib xgraphicsltcg.lib dsound.lib dmusicltcg.lib xactengltcg.lib xsndtrk.lib xvoice.lib xonlines.lib xboxkrnl.lib"
  #}
}

# ===== XBox Specific ======

Platform("Xbox360")
{
  # ----- Configuration specific options -----

  Tool(XBox360Deployment),ExcludedFromBuild       = "TRUE"

  Configuration("Debug")
  {
    Tool(Linker),AdditionalDependencies="xapilibd.lib d3d9d.lib d3dx9d.lib xgraphicsd.lib xboxkrnl.lib xnetd.lib xaudiod.lib xactd.lib x3daudiod.lib xbdm.lib vcompd.lib"
    Tool(XBox360Image),IncludeDebugInfo="TRUE"
    Tool(XBox360Image),NoLibWarn="TRUE"
  }

  Configuration("Release","DevRelease")
  {
    Tool(Linker),AdditionalDependencies="xapilib.lib d3d9.lib d3dx9.lib xgraphics.lib xboxkrnl.lib xnet.lib xaudio.lib xact.lib x3daudio.lib vcomp.lib"
  }


}


# ========= WTL =========

Configuration()
{
  %wtlincdir = "%(lemon_external)\wtl70"
}

# ========= SubVersion =========

Configuration()
{
  %svnsdk        = "%(lemon_external)\subversion\sdk\win32"
  %svnsdkinclude = "%(svnsdk)\include"
  %svnsdklib     = "%(svnsdk)\#(version)\lib"
}


# ========= wxWidgets =========

Configuration()
{
  %wxpostfix = ""
  Configuration(Debug)
  {
    %wxpostfix += "d"
  }

  %wxdirpostfix  = ""

  %wxbasedir = "%(lemon_external)\wxwidgets"
  %wxincdir  = "%(wxbasedir)\include"
  %wxlibdir  = "%(wxbasedir)\lib\vc%(wxdirpostfix)"
  %wxsetup   = "%(wxbasedir)\lib\vc%(wxdirpostfix)\msw%(wxpostfix)"
}

Platform(Win32)
{
  Tool(Compiler)
  {
    AdditionalIncludeDirectories += "%(wxincdir)"
    AdditionalIncludeDirectories += "%(wxsetup)"
  }

  Tool(Linker)
  {
    AdditionalLibraryDirectories += "%(wxlibdir)"
    AdditionalDependencies       += "kernel32.lib user32.lib gdi32.lib comdlg32.lib winspool.lib winmm.lib shell32.lib comctl32.lib ole32.lib oleaut32.lib uuid.lib rpcrt4.lib advapi32.lib wsock32.lib oleacc.lib odbc32.lib"
  }

  Tool(Resource)
  {
    AdditionalIncludeDirectories += "%(wxincdir)"
  }
}

# ========= libxml2 =========

Configuration()
{
  %libxml2incdir  = "%(lemon_external)\libxml2\libxml2sdk\include"
  %libxml2linkage = "unknown"

  Configuration(Debug)
  {
    %libxml2libdir  = "%(lemon_external)\libxml2\libxml2sdk\%(libxml2linkage)\debug\lib"
  }

  Configuration(Release,DevRelease)
  {
    %libxml2libdir  = "%(lemon_external)\libxml2\libxml2sdk\%(libxml2linkage)\release\lib"
  }
}

Platform(Win32)
{
  Tool(Compiler)
  {
    AdditionalIncludeDirectories += "%(libxml2incdir)"
  }

  Tool(Linker)
  {
    AdditionalLibraryDirectories += "%(libxml2libdir)"
  }
}


# ========= Pseudo Projects =========

# --- Dynamic library ---

PseudoProject(lib_dynamic)
{
  Platform(Win32)
  {
    ConfigurationType = DLL
    %libpostfix = "_dll%(POSTFIX)"
    %wxdirpostfix = "_dll"
    %libxml2linkage = "dynamic"

    Tool(Compiler)
    {
      PreprocessorDefinitions += "L_DLL"
      PreprocessorDefinitions += "WXUSINGDLL"

      Configuration("Debug"),RuntimeLibrary = "MultiThreadedDebugDLL"
      Configuration("Release","DevRelease"),RuntimeLibrary = "MultiThreadedDLL"
    }

    Tool(Linker)
    {
      ImportLibrary       = "%(libdir)\%(TargetName)%(LIBPOSTFIX).lib"
      OutputFile          = "%(dlldir)\%(TargetName)%(POSTFIX).dll"
      ProgramDatabaseFile = "%(dlldir)\%(TargetName)%(POSTFIX).pdb"
    }
  }
}

# --- Static library ---

PseudoProject(lib_static)
{
  ConfigurationType = LIB
  %libpostfix = "%(POSTFIX)"
  %wxdirpostfix = "_lib"
  %libxml2linkage = "static"

  Tool(Compiler)
  {
    PreprocessorDefinitions += "L_LIB"
    ProgramDatabaseFileName  = "%(libdir)\%(TargetName)%(LIBPOSTFIX).pdb"
  }

  Tool(Library)
  {
    OutputFile = "%(libdir)\%(TargetName)%(LIBPOSTFIX).lib"
  }
}

# --- DLL static link ---
#
# This creates a DLL file but uses the static libraries for Lemon

PseudoProject(dll_static)
{
  Platform(Win32)
  {
    ConfigurationType = DLL
    %libpostfix = "%(POSTFIX)"
    %wxdirpostfix = "_dll"
    %libxml2linkage = "dynamic"

    Tool(Compiler)
    {
      PreprocessorDefinitions += "L_LIB"
    }

    Tool(Linker)
    {
      ImportLibrary       = "%(libdir)\%(TargetName)%(LIBPOSTFIX).lib"
      OutputFile          = "%(dlldir)\%(TargetName)%(POSTFIX).dll"
      ProgramDatabaseFile = "%(dlldir)\%(TargetName)%(POSTFIX).pdb"
    }
  }
}


# --- Executable static link ---
#
# override the %exedir to place the executable somewhere else
# override %exepostfix to change postfix on exe

PseudoProject(exe_static)
{
  ConfigurationType = EXE

  %libpostfix = "%(POSTFIX)"
  %exepostfix = "%(POSTFIX)"
  %wxdirpostfix = "_lib"
  %libxml2linkage = "static"

  Tool(Compiler)
  {
    PreprocessorDefinitions += "L_LIB"
  }

  Platform(Win32)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
      ProgramDatabaseFile = "%(exedir)\%(TargetName)%(exepostfix).pdb"
    }
  }

  Platform(Xbox)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
      ProgramDatabaseFile = "%(exedir)\%(TargetName)%(exepostfix).pdb"
    }
  }

  Platform(Xbox360)
  {
    Tool(Xbox360Image)
    {
      OutputFileName      = "%(exedir)\%(TargetName)%(exepostfix).xex"
    }

    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
      ProgramDatabaseFile = "%(exedir)\%(TargetName)%(exepostfix).pdb"
    }
  }

  Platform(GNU)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
    }
  }

  Platform(PS2)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).elf"
    }
  }

  Platform(PS2IOP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).irx"
    }
  }

  Platform(PSP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).prx"
    }
  }

  Platform(NDS)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).srl"
    }
  }

  Platform(WII)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).elf"
    }
  }
}

# --- Executable dll link ---
#
# override the %exedir to place the executable somewhere else
# override %exepostfix to change postfix on exe

PseudoProject(exe_dynamic)
{
  ConfigurationType = EXE

  %libpostfix = "_dll%(POSTFIX)"
  %exepostfix = "_dll%(POSTFIX)"
  %wxdirpostfix = "_dll"
  %libxml2linkage = "dynamic"

  Tool(Compiler)
  {
    PreprocessorDefinitions += "L_DLL"
    PreprocessorDefinitions += "WXUSINGDLL"

    Configuration("Debug"),RuntimeLibrary = "MultiThreadedDebugDLL"
    Configuration("Release","DevRelease"),RuntimeLibrary = "MultiThreadedDLL"
  }

  Platform(Win32)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
      ProgramDatabaseFile = "%(exedir)\%(TargetName)%(exepostfix).pdb"
    }
  }

  Platform(Xbox)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
      ProgramDatabaseFile = "%(exedir)\%(TargetName)%(exepostfix).pdb"
    }
  }

  Platform(Xbox360)
  {
    Tool(Xbox360Image)
    {
      OutputFileName      = "%(exedir)\%(TargetName)%(exepostfix).xex"
    }

    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
      ProgramDatabaseFile = "%(exedir)\%(TargetName)%(exepostfix).pdb"
    }
  }

  Platform(GNU)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).exe"
    }
  }

  Platform(PS2)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).elf"
    }
  }

  Platform(PS2IOP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).irx"
    }
  }

  Platform(PSP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).prx"
    }
  }

  Platform(NDS)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).srl"
    }
  }

  Platform(WII)
  {
    Tool(Linker)
    {
      OutputFile          = "%(exedir)\%(TargetName)%(exepostfix).elf"
    }
  }
}

# --- Test Executable static link ---
#
# override the %exedir to place the executable somewhere else
# override %testexename to change the executable name
# override %exepostfix to change postfix on exe

%unittestmain = "%(lemon_buildroot)/engine/unittest/common/testmain.cpp"

PseudoProject(test_static)
{
  %testexedir  = "%(mpath)\exe"
  %testexename = "test"

  ConfigurationType = EXE

  %libpostfix = "%(POSTFIX)"
  %exepostfix = "%(POSTFIX)"
  %wxdirpostfix = "_lib"
  %libxml2linkage = "static"

  # Unit test lib

  Tool(Linker),AdditionalDependencies += "lplatform%(LIBPOSTFIX).lib"
  Tool(Linker),AdditionalDependencies += "lunittest%(LIBPOSTFIX).lib"
  Tool(Linker),AdditionalDependencies += "lplatform%(LIBPOSTFIX).lib" # For GCC library ordering / symbol finding sillyness


  # Platform libs

  Platform(PS2)
  {
    Tool(Linker),SystemLibraries += "kernl"
    Tool(Linker),SystemLibraries += "sn"
    Tool(Linker),SystemLibraries += "stdc++"
    Tool(Linker),SystemLibraries += "mc"
    Tool(Linker),SystemLibraries += "dma"
    Tool(Linker),SystemLibraries += "cdvd"
    Tool(Linker),SystemLibraries += "graph"
  }

  Platform(PSP)
  {
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/ctrl_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/display_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/rtc_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/dmac_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/ge_user_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/mediaman_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/utility_stub.a"

    # For SN -- why is this not needed on GNU toolchain?
    Tool(Linker),SystemLibraries += "kernel"
    Tool(Linker),SystemLibraries += "gu"
    Tool(Linker),SystemLibraries += "gum"
  }

  # Configuration

  Tool(Compiler)
  {
    PreprocessorDefinitions += "L_LIB"
  }

  Platform(Win32)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
      ProgramDatabaseFile = "%(testexedir)\%(testexename)%(exepostfix).pdb"
    }
  }

  Platform(Xbox)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
      ProgramDatabaseFile = "%(testexedir)\%(testexename)%(exepostfix).pdb"
    }
  }

  Platform(Xbox360)
  {
    Tool(Xbox360Image)
    {
      OutputFileName          = "%(testexedir)\%(testexename)%(exepostfix).xex"
    }

    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
      ProgramDatabaseFile = "%(testexedir)\%(testexename)%(exepostfix).pdb"
    }
  }

  Platform(GNU)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
    }
  }

  Platform(PS2)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).elf"
    }
  }

  Platform(PS2IOP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).irx"
    }
  }

  Platform(PSP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).prx"
    }
  }

  Platform(NDS)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).srl"
    }
  }

  Platform(WII)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).elf"
    }
  }
}

# --- Executable dll link ---
#
# override the %testexedir to place the executable somewhere else
# override %testexename to change the executable name
# override %exepostfix to change postfix on exe

PseudoProject(test_dynamic)
{
  %testexedir  = "%(mpath)\exe"
  %testexename = "test"

  ConfigurationType = EXE

  %libpostfix = "_dll%(POSTFIX)"
  %exepostfix = "_dll%(POSTFIX)"
  %wxdirpostfix = "_dll"
  %libxml2linkage = "dynamic"

  # Unit test lib

  Tool(Linker),AdditionalDependencies += "lplatform%(LIBPOSTFIX).lib"
  Tool(Linker),AdditionalDependencies += "lunittest%(LIBPOSTFIX).lib"

  # Platform libs

  Platform(PS2)
  {
    Tool(Linker),SystemLibraries += "kernl"
    Tool(Linker),SystemLibraries += "sn"
    Tool(Linker),SystemLibraries += "stdc++"
    Tool(Linker),SystemLibraries += "mc"
    Tool(Linker),SystemLibraries += "dma"
    Tool(Linker),SystemLibraries += "cdvd"
    Tool(Linker),SystemLibraries += "graph"
  }

  Platform(PSP)
  {
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/ctrl_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/display_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/rtc_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/dmac_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/ge_user_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/mediaman_stub.a"
    Tool(Linker),AdditionalDependencies += "#(PSPPATH)/lib/utility_stub.a"
  }

  # Configuration

  Tool(Compiler)
  {
    PreprocessorDefinitions += "L_DLL"
    PreprocessorDefinitions += "WXUSINGDLL"

    Configuration("Debug"),RuntimeLibrary = "MultiThreadedDebugDLL"
    Configuration("Release","DevRelease"),RuntimeLibrary = "MultiThreadedDLL"
  }

  Platform(Win32)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
      ProgramDatabaseFile = "%(testexedir)\%(testexename)%(exepostfix).pdb"
    }
  }

  Platform(Xbox)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
      ProgramDatabaseFile = "%(testexedir)\%(testexename)%(exepostfix).pdb"
    }
  }

  Platform(Xbox360)
  {
    Tool(Xbox360Image)
    {
      OutputFileName          = "%(testexedir)\%(testexename)%(exepostfix).xex"
    }


    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
      ProgramDatabaseFile = "%(testexedir)\%(testexename)%(exepostfix).pdb"
    }
  }

  Platform(GNU)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).exe"
    }
  }

  Platform(PS2)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).elf"
    }
  }

  Platform(PS2IOP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).irx"
    }
  }

  Platform(PSP)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).prx"
    }
  }

  Platform(NDS)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).srl"
    }
  }

  Platform(WII)
  {
    Tool(Linker)
    {
      OutputFile          = "%(testexedir)\%(testexename)%(exepostfix).elf"
    }
  }
}

